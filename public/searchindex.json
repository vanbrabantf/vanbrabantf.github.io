[{"section":"Blog","slug":"/blog/2020-02-07-the-economics-of-clean-code/","title":"The economics of clean code","description":"Clean code makes projects more comfortable to work with and improves shelf life. Its the antagonist of vile legacy codebases that are unmaintainable. Then why does business always treat it as a secondary objective? Do they just dont get it?","date":"February 7, 2020","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2020-02-07-economics/header_hu30910665284931ace4f57faa1e01d828_45478_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"115\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2020-02-07-economics\\/header_hu30910665284931ace4f57faa1e01d828_45478_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2020-02-07-economics/header_hu30910665284931ace4f57faa1e01d828_45478_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2020-02-07-economics\\/header_hu30910665284931ace4f57faa1e01d828_45478_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Software, Managing technology","tags":"Clean code, legacy","content":" \u0026ldquo;The only way to make the deadline — the only way to go fast — is to keep the code as clean as possible at all times.\u0026rdquo; — Robert C. Martin\nI\u0026rsquo;m afraid I have to disagree with this statement. Let me tell you why.\nWhat is clean code There seem to be many opinions surrounding clean code. Some people have an entire architecture of how code should look. Others stick to the actual layout of the code, or length of a class while even others vaguely point towards Robert C. Martin\u0026rsquo;s books.\nOne thing is clear; it\u0026rsquo;s something that\u0026rsquo;s really on a lot of developers mind. Clean code makes projects more comfortable to work with and improves shelf life. It\u0026rsquo;s the antagonist of vile legacy codebases that are unmaintainable.\nThen why does business always treat it as a secondary objective? Do they just don\u0026rsquo;t get it?\nBusiness needs vs developers struggles Clean code and architecture indeed allow businesses to have a more maintainable product. But I\u0026rsquo;m sure you would agree that before you can have a maintainable product, you should first strive to have an actual product.\nThe foundations of a product are undoubtedly essential; they dictate the mindset of the months/years to come, but they also take a tremendous amount of time. Time in which the project isn\u0026rsquo;t moving. If the project isn\u0026rsquo;t moving, we are not generating revenue. Every start indeed requires a startup cost, but we also need the lights burning and the espresso flowing.\nThis entire mindset was partly the start of the agile movement. Build a minimal viable product, get it to the market fast; see if there is a demand, iterate.\nIt\u0026rsquo;s where that horrible motto from Facebook comes from: \u0026ldquo;move fast and break things\u0026rdquo;.\nIt seems we\u0026rsquo;ve come to an impasse: the tech side wants a well balanced and nutritional dinner, while the business side wants fast food\nTechnical debt So yes, that mindset results in those paymentsService god classes that are 5000 lines long and nobody dares to touch. Controllers that speak directly to databases; in short, technical debt.\nIt seems we\u0026rsquo;ve come to an impasse: the tech side wants a well balanced and nutritional dinner, while the business side wants fast food. But it\u0026rsquo;s essential to realise that it\u0026rsquo;s not a tug of war. It\u0026rsquo;s better to look at it as a process that needs some leniency from both sides.\nAs said in the previous chapter, you can\u0026rsquo;t build a product in a vacuum. You need to stave it against the market. Otherwise, you risk much capital against untested ideas. Investing a third of your budget before you even can think of a front-end might be a bit risky from a business standpoint.\nOn the other side, keeping acquiring technical debt is also not a way forward. You will, indeed have a quick start. Implement features in days instead of weeks. \u0026hellip; till you can\u0026rsquo;t anymore. Just like financial debt, technical debt will eventually catch up with you. And it can end your business just as quickly. It\u0026rsquo;s great to have a product that\u0026rsquo;s a perfect market fit, but if you can\u0026rsquo;t keep up with your competitors cause your application is too slow, or features can\u0026rsquo;t be implemented quickly enough due to the technical mess, you will lose out.\nSo treat that technical debt as you would financial debt. Use it to invest it into your project. But keep track of it and pay it off. I would recommend this post from Mathias Verraes on how you can do this.\nImage courtesy of XKCD (https://xkcd.com/844/ )\nLong term thinking vs quick wins You also have to keep the scope of the project in mind. Some people build systems with the mindset that it might blow up anytime and we\u0026rsquo;re going to need to support this for years to come. Other people start big projects without tests and pretend that they\u0026rsquo;re going to write them in the future, \u0026ldquo;when there is time\u0026rdquo;.\nIt\u0026rsquo;s critical to strike a decent balance here and reevaluate the scope and market position of the product at regular intervals. This evaluation should not be only on the business or technical side; this is a team effort and should also be communicated that way.\nMy takeaways (TL;DR) It\u0026rsquo;s essential to realise what you are building and the impact it will have in the near and far future. Keep the short time roadmap concise and don\u0026rsquo;t over-invest (financially and technically) but also don\u0026rsquo;t try and outrun the liabilities you are taking on along the way.\nKeep communication of the status and impact of the project open towards the entire team, and reevaluate these values on a regular timeframe. Adapt your level of technical investment according to these projections.\n"},{"section":"Blog","slug":"/blog/2019-05-09-binary-tree/","title":"What is a binary tree and why would I ever want to reverse it","description":"You have probably already heard the horror stories of code interviews where they ask you to reverse a binary tree on a whiteboard. Well, a few days ago I was in that exact situation. And I had no idea what the interviewer was talking about. So what are these binary trees and why is it so critical that you know how to inverse them? Lets find out.","date":"May 9, 2019","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2019-05-09-binary-tree/header_hu8590b9fc2549546071fa46fb29151515_131356_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"115\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2019-05-09-binary-tree\\/header_hu8590b9fc2549546071fa46fb29151515_131356_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2019-05-09-binary-tree/header_hu8590b9fc2549546071fa46fb29151515_131356_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2019-05-09-binary-tree\\/header_hu8590b9fc2549546071fa46fb29151515_131356_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Software","tags":"Getting hired","content":"You have probably already heard the horror stories of code interviews where they ask you to reverse a binary tree on a whiteboard. (if not check this blog post that I profoundly disagree with)\nWell, a few days ago I was in that exact situation. And I had no idea what the interviewer was talking about. So what are these binary trees and why is it so critical that you know how to inverse them? Let’s find out.\nWhat is a binary tree A binary tree is a very simple data structure that as the name suggests looks like an upside down tree.\nThis structure is mainly used for searching. For example, if we needed to find 4 in this structure quickly, we would need only to make 2 binary decisions. If we scale this up to 1000 nodes, we would only need about 10 choices. There are other options still, like self-balancing binary trees but let’s keep it simple at the moment, and just focus on balanced binary trees.\nLet’s invert them Ok so now that we know what it is let’s start with inverting a binary tree. What do we mean by that? It’s actually very straightforward. We turn this:\n4 / \\ 2 7 / \\ / \\ 1 3 6 9 into\n4 / \\ 7 2 / \\ / \\ 9 6 3 1 We flip the entire structure horizontally. So 7 and 2 are flipped, and the 2 children are also flipped. All the way down.\nDown to code As we are good OOP developers, we are first going to start with our tree. A binary tree is nothing more than a collection of points, called nodes, with 2 children: a left and a right one. So first we are going to create a Node object.\n\u0026lt;?php class Node { private $value; private $left; private $right; public function __construct(string $value, ?Node $left, ?Node $right) { $this-\u0026gt;left = $left; $this-\u0026gt;right = $right; $this-\u0026gt;value = $value; } public function getValue(): string { return $this-\u0026gt;value; } public function getLeft(): ?Node { return $this-\u0026gt;left; } public function getRight(): ?Node { return $this-\u0026gt;right; } } (I’ve added value to the object as well, just to give it a practical use)\nNow that we have the Node object it’s time to create a tree.\n\u0026lt;?php $level3al = new Node(\u0026#39;deepAL\u0026#39;, null, null); $level3ar = new Node(\u0026#39;deepAR\u0026#39;, null, null); $level3bl = new Node(\u0026#39;deepBL\u0026#39;, null, null); $level3br = new Node(\u0026#39;deepBR\u0026#39;, null, null); $level2a = new Node(\u0026#39;midA\u0026#39;, $level3al, $level3ar); $level2b = new Node(\u0026#39;midB\u0026#39;, $level3bl, $level3br); $level1 = new Node(\u0026#39;top\u0026#39;, $level2a, $level2b); At this point we have a data structure that looks like this:\nThis is all set up, time to move on to the swapping. If we break the problem down to its core, we just want to swap the children of a node. Like this:\n\u0026lt;?php public function invert(Node $tree): Node { $right = $tree-\u0026gt;getLeft(); $left = $tree-\u0026gt;getRight(); return new Node($tree-\u0026gt;getValue(), $left, $right); } We take the Node and create (and return) a new Node with the children swapped. We now have:\nAt first, glance that looks like we completed the task, but if you look a tiny bit deeper, you might see that we only inverted one level. The lower levels are in the same place (but on the other side of the branch).\nTo switch those we actually just have to repeat this process till we run out of levels. Now that sounds like a recursive function.\n\u0026lt;?php public function invert(?Node $tree): ?Node { if ($tree === null) { return null; } $right = $this-\u0026gt;invert($tree-\u0026gt;getLeft()); $left = $this-\u0026gt;invert($tree-\u0026gt;getRight()); return new Node($tree-\u0026gt;getValue(), $left, $right); } Let’s run through it:\nThe first thing to note is that our function signature changed. We now also accept null values. Why? Well once we hit bottom, there aren’t any children left. getRight() will return null. This null will indicate that we are at the end of our loop.\nnext up is that if check:\nif ($tree === null) { return null; } This is that check for when we run into a null value as described above.\nNow the meat of the algorithm:\n$right = $this-\u0026gt;invert($tree-\u0026gt;getLeft()); $left = $this-\u0026gt;invert($tree-\u0026gt;getRight()); return new Node($tree-\u0026gt;getValue(), $left, $right); This is the recursive method. Every time we pass this, we go one level deeper. If we hit bottom, that if will take care of it and it stops. If not, we swap the values and bubble it back up to the level above.\nThat’s it. Inverting a binary tree is 10 lines of code. It’s actually pretty simple.\nCool, so when would I actually want to inverse a Binary tree? I have no idea. I’m sure some brilliant people on Reddit or Twitter will have a trove of useful functionality, but I sure can’t think of one.\nIn my opinion, this is just one of those job interview questions that solely exist so the interviewer can feel smart. You could argue that this is a simple test to see if the candidate can think recursively, but I believe that an open conversation about the interests of the candidate + maybe a small take-home test would give way more insights.\n"},{"section":"Blog","slug":"/blog/2019-04-03-the-simple-class/","title":"The simple class","description":"One of my favourite types of classes is a value object. For those not in the known, a value object is a small class that holds a value with a tiny bit of extra logic surrounding it. Sounds simple enough right? I think a nice way of looking at these classes is implementing them as an extension of the type system of your programming language. Let take a look at an uncomplicated example.","date":"April 3, 2019","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2019-04-03-the-simple-class/header_hu8590b9fc2549546071fa46fb29151515_98003_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"115\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2019-04-03-the-simple-class\\/header_hu8590b9fc2549546071fa46fb29151515_98003_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2019-04-03-the-simple-class/header_hu8590b9fc2549546071fa46fb29151515_98003_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2019-04-03-the-simple-class\\/header_hu8590b9fc2549546071fa46fb29151515_98003_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Software, Managing technology","tags":"Clean code, software patterns","content":"I work in many legacy code bases, and in fact, I’ve made it a big part of my career. I love diving into big monoliths that have grown out of proportion and tidying them up. One of the best parts of that work is rewriting a God class into a collection of small reusable classes. Let’s take a look at what makes a simple class great.\nOne of my favourite types of classes is a value object. For those not in the known, a value object is a small class that holds a value with a tiny bit of extra logic surrounding it. Sounds simple enough right? I think a nice way of looking at these classes is implementing them as an extension of the type system of your programming language. Let take a look at an uncomplicated example.\n\u0026lt;?php declare(strict_types=1); final class CustomerName { private $firstName; private $lastName; public function __construct(string $firstName, string $lastName) { $this-\u0026gt;firstName = $firstName; $this-\u0026gt;lastName = $lastName; } public function firstName(): string { return $this-\u0026gt;firstName; } public function lastName(): string { return $this-\u0026gt;lastName; } public function fullName(): string { return sprintf( \u0026#39;%s %s\u0026#39;, $this-\u0026gt;firstName(), $this-\u0026gt;lastName() ); } } This small class doesn’t do anything really, and it just holds two strings. The only tiny bit of function (on first glance) is that it concatenates the two strings. However, for the minimal amount of code in this class, it does offer a ton of value to your code base.\nPutting an end to the class struggle Once we start replacing every occurrence of the first name and last name with this simple class, you will quickly begin to see the value. First of all, every time you come across this class in your code, you know that it has a first name and a last name in it. You also know that both of these values will be strings. And that you have an easy way to display the first name - last name combination.\nYou can now also add this as a safety in your new classes. You could, for example, do something like this:\n\u0026lt;?php public function sendMail( CustomerName $customerName, Email $email ): void { $mail = new Mail($customerName-\u0026gt;fullName(), $email); // send mail } Here you easily guard your method from all kinds of extra logic. You know that the variables that enter the method are of the type Email and Customer class.\nThere is however still a major issue with our values objects. We could still trick our system into accepting empty strings. Let’s take a look at how we can make these classes just a tiny bit more robust.\nPutting a stop to empty values We know that our values in our object will always be of the type string, but “” is also a string. so you could do\nnew CustomerName('', ''); or even new CustomerName('\\$', '!');\nYou could allow that last one if you are building a platform for rappers, but in most cases, you would want to guard against that.\nIf you are using PHP (like the examples are), I would suggest using a package like webmozart/assert .\n\u0026lt;?php public function __construct(string $firstName, string $lastName) { Assert::stringNotEmpty($firstName); Assert::stringNotEmpty($lastName); Assert::alpha($firstName); Assert::alpha($lastName); $this-\u0026gt;firstName = $firstName; $this-\u0026gt;lastName = $lastName; } (you could add a private validation method to the class that is called on the first line of the constructor if there are many validation rules)\nThe class is now a lot smarter; it validates the values that come in and will throw an exception when they don’t meet the expectations of the class.\nNow you can be sure that whenever you encounter this class, the values within will be usable.\nAdding more means of production to the classes It might be very tempting to start now adding more and more logic to these classes. However, I would caution restraint here.\nA common thing you see is people adding getters and setters to these classes. You might notice we already have getters (we just not named them getters), and I would strongly recommend against adding setters.\nIf you need to update a value in the class, create a new instance of the class. Value objects are meant to be built and discarded. By creating new value objects you also make sure you pass the constructor every time, and therefore including the validation.\nIf you really feel like adding setters, make sure they create new instances themselves:\n\u0026lt;?php public function setFirstName(string $firstName): CustomerName { return new self($firstName, $this-\u0026gt;lastName()); } Another thing to touch upon is named constructors. A named constructor allows you to create the value object under different circumstances. I feel like it is easiest to explain with another example.\n\u0026lt;?php declare(strict_types=1); final class CustomerName { private $firstName; private $lastName; public function __construct(string $firstName, string $lastName) { Assert::stringNotEmpty($firstName); Assert::stringNotEmpty($lastName); Assert::alpha($firstName); Assert::alpha($lastName); $this-\u0026gt;firstName = $firstName; $this-\u0026gt;lastName = $lastName; } public static function fromFullName(string $fullname): self { $pieces = explode(\u0026#39; \u0026#39;, $fullname); return new CustomerName($pieces[0], $pieces[1]); } } (this example is to demonstrate the function of a named constructor. This method assumes that a name is always in 2 pieces with the first name as the first piece. If you want to implement this, please add extra logic)\nThese constructors are a small convenient way to create the value object. Named constructors allow for great flexibility. However, like always, you should not take this flexibility too far.\nYou should always ask yourself, is this method solving a real problem, or am I just adding this for a one-off small convenience?\nNamed constructors are very useful in a “Time” class, where you can create the class from a string format, or from the hour, minute and second parameters as further explained here by Mathias Verraes .\nIn closing There is still a lot to be said about value objects. We haven’t touched upon testing, logging, naming…\nFor more information about these topics, I would advise you to look into some DDD books or even better check out Matthias Noback ’s book “Style Guide for Object Design” . A book that prompted me to write this article. (I get no personal benefits for advertising this book, I just think it’s a great book)\nIf you haven’t implemented Value objects into your codebase, I would greatly advise you to give it a try. You will wonder how you ever lived without it.\n"},{"section":"Blog","slug":"/blog/2018-12-13-a-love-letter-to-legacy/","title":"A love letter to legacy projects","description":"Monday morning. Your previous project just wrapped up, and they are going to assign you a brand new one. They even promised you the lead on this project. Who said Mondays couldn’t be great? A few hours later and you are staring at the most dreadful code you have ever seen — controllers of more than a thousand lines, PHP that injects jQuery in the views, raw SQL statements that could challenge a Dostoyevsky novel in size. The list goes on and on. This Monday is going to need a ton of coffee.","date":"December 12, 2018","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2018-12-12-a-love-letter-to-legacy/header_hu8590b9fc2549546071fa46fb29151515_118876_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"115\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2018-12-12-a-love-letter-to-legacy\\/header_hu8590b9fc2549546071fa46fb29151515_118876_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2018-12-12-a-love-letter-to-legacy/header_hu8590b9fc2549546071fa46fb29151515_118876_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2018-12-12-a-love-letter-to-legacy\\/header_hu8590b9fc2549546071fa46fb29151515_118876_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Software, Managing technology","tags":"Clean code, legacy","content":"Monday morning. Your previous project just wrapped up, and they are going to assign you a brand new one. They even promised you the lead on this project. Who said Mondays couldn’t be great?\nA few hours later and you are staring at the most dreadful code you have ever seen — controllers of more than a thousand lines, PHP that injects jQuery in the views, raw SQL statements that could challenge a Dostoyevsky novel in size. The list goes on and on. This Monday is going to need a ton of coffee.\nThe previous few lines might sound very familiar to you. You might even be working on a project like this at this very moment. If that is the case, … lucky you.\nWhy do these horrible applications exist? Most applications don’t start like this. As you know, green field applications start full of hopes, dreams and rainbows. A new business idea gets launched. It does something small, pretty good. People like the application. They like it a lot. More and more customers flock to the application. You excitingly add more functionality to your small idea. Soon, one of your more prominent clients, asks for a very valid use case.\nHmm, you haven’t thought about this particular flow in the application. To be honest; the application doesn’t support it. However… it’s a big client, and it’s a great idea. You know what, this small little hack won’t make the difference. We’ll document it, so everyone knows about it.\nFast forward a few months. You have a dozen developers working for you, and your Kanban feature board is filled to the brim. The strange thing about the board, however, is that most of the features on that board don’t come from your hand, they come from customers. Moreover, they all want concrete things very tailored to their workflows. That little hack that’s been made a few months ago is now not even considered a hack anymore; it’s just how the application works. Moreover, if you take a step back, most of the application is now a collection of these small little hacks.\nYou might think that this is a horrible product, and from a code perspective you might be right. However, from a business perspective, this is a vital process. The product has a ton of customers, and they are invested enough to want to tailor it to their workflows and they even reach out to you with suggestions. Granted, not all of these suggestions are great, but they wouldn’t come forward if there weren’t a need for them.\nIs this the low point? However, now where does that leave you, It’s entertaining to have a company with many customers, but at the end of the day, you’re still the one that is in the trenches of despair.\nNot necessarily; Having a product like this tend to generate income. The most significant part of that income is invested back into the project. Once the legacy code hampers the production of new features or generates too many bugs, the discussion surrounding refactoring parts of the code tend to start getting more and more speed.\nOnce you start refactoring, you suddenly notice that you have so much value in front of you — a ton of use cases already implemented, a wealth of user behaviour and data, metrics and most important of all: the budget and infrastructure to match.\nWorking with legacy day to day Most refactorings tend to start with the question from management that is frequently a variation of: “what are the worst parts of the application, and how can we make them better”. This sentence is poetry to a developer’s ear. A great chance to go over the entire application note down the pain points, look at technologies that might ease trouble, have lengthy discussions with colleagues about the architecture of the pesky service classes. Not only are you going to learn a ton on the technical side of things, socially you’re going to improve in ways of persuasion and proposing ideas.\nAfter a while, the most significant part of the spec will be done. Moreover, I can guarantee you that you’ve never been so excited to work on the project before. You can now look at the project and see a road to be walked, where before it was just an end to a means.\nNow comes the tricky part, refactoring one of those huge files. The first time you read over the class, you might get some doubts about this whole refactoring stuff. Luckily you stick to your means of attack and write your first end to end tests. Once you’ve established a safety net, you regain a big part of your courage.\nOk you think, this piece of code I might be able to extract to a separate class. You write the unit test. You extract the code, and everything is green. Ok, great start! Let’s do it again.\nA few hours later you stare at the construction you’ve made. It’s a vast improvement of what it was before (every single indentation you fix is an improvement), but looking at the loose classes, you can see some definite improvements still. You could leave it as it is, and that would be great, or go further. Either path you chose, at one point you’re going to create a PR, and sit back and stare at the diff screen of your favourite git hosting service … what a beauty.\nGrowing with the application Working on applications like this is all about responsibility. Every decision you make as a team will impact you in the future, in a good way and sometimes in a not so good way.\nThis kind of pressure might sound like a burden, but in reality, it is indeed a blessing. It forces you to slow down and think about your actions as a team. Should I write a test for this? The answer is going to be yes, cause once it has a test, it’s going to part of the test coverage for maybe years to come.\nSo that’s the beauty of legacy code: You get a rough stone that you can shape into a gem. The pressure of delivering new features won’t be lower on a legacy application over Greenfield, but management often understands the need for refactoring and architectural meetings better.\nMoreover, all the technologies and paradigms learned in the refactoring of legacy code are invaluable when you move on to Greenfield projects as you now have the context for the need for value objects, testing and decoupling.\nSo yes, if you’re about to start on a legacy code base. Lucky you. You’re about to have one hell of a ride.\nPs: Happy birthday Taylor Swift\n"},{"section":"Blog","slug":"/blog/2018-10-08-integration-operation-segregation-principle/","title":"The Integration Operation Segregation Principle","description":"A few weeks ago I attended a DDDBelgium meetup where I was lucky to participate in a refactor workshop lead by Pim and Joop. After the incredible workshop Pim, Dries and me were discussing some code that we refactored earlier . Not so long in the conversation the words “Integration Operation Segregation Principle” casually got dropped by Pim.","date":"October 8, 2018","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2018-10-09-princ/header_hu8590b9fc2549546071fa46fb29151515_150417_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"115\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2018-10-09-princ\\/header_hu8590b9fc2549546071fa46fb29151515_150417_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2018-10-09-princ/header_hu8590b9fc2549546071fa46fb29151515_150417_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2018-10-09-princ\\/header_hu8590b9fc2549546071fa46fb29151515_150417_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Software, Managing technology","tags":"Clean code, legacy","content":"A few weeks ago I attended a DDDBelgium meetup where I was lucky to participate in a refactor workshop lead by Pim and Joop . After the incredible workshop Pim, Dries and me were discussing some code that we refactored earlier . Not so long in the conversation the words \u0026ldquo;Integration Operation Segregation Principle\u0026rdquo; casually got dropped by Pim.\nNow I\u0026rsquo;m going, to be honest with you (as I was with them), I had no idea what the hell he was talking about. And maybe neither do you.\nA simple PriceCalculator Let\u0026rsquo;s take a look at some code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?php declare(strict_types=1); namespace Car\\Rent; final class PriceCalculator { public function calculate(CarRental $carRental): int { $startDate = $carRental-\u0026gt;getStartDate(); $endDate = $carRental-\u0026gt;getEndDate(); $days = $startDate-\u0026gt;diff($endDate); $dayPrice = $days * $carRental-\u0026gt;getPricePerDay(); return $dayPrice + ($carRental-\u0026gt;getDistance() * $carRental-\u0026gt;getPricePerKm()); } } As you can see, we have a small piece of code that calculates the price for a few days of rental.\nThe code itself is pretty straightforward. We gather the start date, the end date. We calculate the number of days and later on multiply those days by the price + the km\u0026rsquo;s driven. A small piece of code, that does a lot.\nNo code is complete without a test: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;?php declare(strict_types=1); namespace Tests\\Car\\Rent; class PriceCalculatorTest extends TestCase { /** * @test */ public function it_calculates_a_price() { $carRental = $this-\u0026gt;getMockBuilder(CarRental::class) -\u0026gt;disableOriginalConstructor() -\u0026gt;getMock(); $carRental-\u0026gt;expects($this-\u0026gt;once()) -\u0026gt;method(\u0026#39;getStartDate\u0026#39;) -\u0026gt;willReturn(time()); $carRental-\u0026gt;expects($this-\u0026gt;once()) -\u0026gt;method(\u0026#39;getEndDate\u0026#39;) -\u0026gt;willReturn(time()); $carRental-\u0026gt;expects($this-\u0026gt;once()) -\u0026gt;method(\u0026#39;getEndDate\u0026#39;) -\u0026gt;willReturn(time()); $carRental-\u0026gt;expects($this-\u0026gt;once()) -\u0026gt;method(\u0026#39;getPricePerDay\u0026#39;) -\u0026gt;willReturn(10); $carRental-\u0026gt;expects($this-\u0026gt;once()) -\u0026gt;method(\u0026#39;getDistance\u0026#39;) -\u0026gt;willReturn(10); $carRental-\u0026gt;expects($this-\u0026gt;once()) -\u0026gt;method(\u0026#39;getPricePerKm\u0026#39;) -\u0026gt;willReturn(1); $calculator = new PriceCalculator(); $price = $calculator-\u0026gt;calculate($carRental); $this-\u0026gt;assertSame(110, $price); } } That\u0026rsquo;s a big test.\nIt mocks a few things, then calls the calculator and asserts the results. All in all a very simple unit test, but not a fun one to write.\nTurning code into a lot more code If we take a look at that PriceCalculator class you can see it structurally does 2 things: it fetches data and performs actions on that data. Or in other words: it integrates and operates.\nAt this point, you probably already figured out when the Integration Operation Segregation Principle is all about: splitting these up. Let me show what the previous class looks like with this principle applied: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \u0026lt;?php declare(strict_types=1); namespace Car\\Rent; final class PriceCalculator { private $dateRangePriceCalculator; private $distancePriceCalculator; private $dayDistanceCalculator; public function __construct( DateRangePriceCalculator $dateRangePriceCalculator, DistancePriceCalculator $distancePriceCalculator, DayDistanceCalculator $dayDistanceCalculator ) { $this-\u0026gt;dateRangePriceCalculator = $dateRangePriceCalculator; $this-\u0026gt;distancePriceCalculator = $distancePriceCalculator; $this-\u0026gt;dayDistanceCalculator = $dayDistanceCalculator; } public function calculate(CarRental $carRental): int { $startDate = $carRental-\u0026gt;getStartDate(); $endDate = $carRental-\u0026gt;getEndDate(); $days = $startDate-\u0026gt;diff($endDate); $dayPrice = $this-\u0026gt;dateRangePriceCalculator-\u0026gt;calculate( $days, $carRental-\u0026gt;getPricePerDay() ); $distancePrice = $this-\u0026gt;distancePriceCalculator-\u0026gt;calculate( $carRental-\u0026gt;getDistance(), $carRental-\u0026gt;getPricePerKm() ); return $this-\u0026gt;dayDistanceCalculator-\u0026gt;calculate( $dayPrice, $distancePrice ); } } 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;?php declare(strict_types=1); namespace Car\\Rent; final class DateRangePriceCalculator { public function calculate(int $days, int $pricePerDay) :int { return $days * $pricePerDay; } } 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;?php declare(strict_types=1); namespace Car\\Rent; final class DistancePriceCalculator { public function calculate(int $distance, int $pricePerKm): int { return $distance * $pricePerKm; } } 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;?php declare(strict_types=1); namespace Car\\Rent; final class DayDistanceCalculator { public function calculate(int $dayPrice, int $distancePrice): int { return $dayPrice + $distancePrice; } } \u0026ldquo;Frederick you devious hack!\u0026rdquo; you might shout, You\u0026rsquo;ve turned a small method into a 4 class method that more than doubles the lines of code.\nWell, you\u0026rsquo;re not wrong. It\u0026rsquo;s way more code. And on first glance, it looks way more complex. But let\u0026rsquo;s take a step back and go over it.\nExtracting complexity if you strip away the dependency injection etc, you\u0026rsquo;re left with 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;?php public function calculate(CarRental $carRental): int { $startDate = $carRental-\u0026gt;getStartDate(); $endDate = $carRental-\u0026gt;getEndDate(); $days = $startDate-\u0026gt;diff($endDate); $dayPrice = $this-\u0026gt;dateRangePriceCalculator-\u0026gt;calculate( $days, $carRental-\u0026gt;getPricePerDay() ); $distancePrice = $this-\u0026gt;distancePriceCalculator-\u0026gt;calculate( $carRental-\u0026gt;getDistance(), $carRental-\u0026gt;getPricePerKm() ); return $this-\u0026gt;dayDistanceCalculator-\u0026gt;calculate( $dayPrice, $distancePrice ); } There is nothing complex going on here. Everything perfectly describes what is happening. That $dayPrice ? Oh, it\u0026rsquo;s been calculated, how is it being calculated? Who cares. No need to worry about it. Someone with almost no programming knowledge can read this method and fully understand what\u0026rsquo;s happening here.\nBut what about the logic. 1 2 3 4 5 6 7 8 \u0026lt;?php final class DateRangePriceCalculator { public function calculate(int $days, int $pricePerDay): int { return $days * $pricePerDay; } } I would argue that the logic in there is even more simple.\nIn the future, there might be some business logic changes (we might need to do something with tax?). We now know where we can do that, everything is contained in this little class.\nThis is also a nice illustration of the Open–closed principle .\nSo yes, we do have a lot more code. But it\u0026rsquo;s all very simple code, easy to read, easy to debug and the coolest of all: Easy to test. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php declare(strict_types=1); namespace Tests\\Car\\Rent; use Car\\Rent\\DateRangePriceCalculator; class DateRangePriceCalculatorTest extends TestCase { /** * @test */ public function it_calculates_a_price_for_a_date_range() { $dateRangeCaluclator = new DateRangePriceCalculator(); $price = $dateRangeCaluclator-\u0026gt;calculate(2, 50); $this-\u0026gt;assertSame(100, $price); } } Now that is a nice unit test. No mocks, easy to write, easy to read. (compare this to the unit test at the top of this article).\nConclusion As you can see the Integration Operation Segregation Principle is just a long and complicated term to describe something very simple. This all might seem like a lot of work, but it\u0026rsquo;s worth it. Your code and especially your tests will thank you later\nIf you want to read more about this, do check out this incredible blogpost: The Incremental Architect´s Napkin - #7 - Nest flows to scale functional design "},{"section":"Blog","slug":"/blog/2017-12-7-atomic-commits/","title":"Atomic commits: Telling stories with Git","description":"These days I’m all into atomic commits and it really made my work beter. Never heard of that concept? No worries, let me introduce you to it","date":"December 7, 2017","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2017-12-7-atomic-commits/header_hu8590b9fc2549546071fa46fb29151515_100507_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"115\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2017-12-7-atomic-commits\\/header_hu8590b9fc2549546071fa46fb29151515_100507_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2017-12-7-atomic-commits/header_hu8590b9fc2549546071fa46fb29151515_100507_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2017-12-7-atomic-commits\\/header_hu8590b9fc2549546071fa46fb29151515_100507_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Software, Managing technology","tags":"Clean code, GIT","content":"I always find it amazing to see how different people create pull requests. Some people like to put every file they’ve touched into one big commit. Other people split their commits up per file. There are even people that split it up according to domains.\nI’ve been all these people at one point in my career, but these days I’m all into atomic commits. Never heard of that concept? No worries, let me introduce you to:\nThe case for atomic commits Atomic commits, sometimes also called micro commits, is the practice of explaining your thought process in the form of commit messages and code. It comes down to documenting the way to the solution.\nAn example is the easiest way to demo this.\nTake for example this pseudo code:\n1 2 3 4 5 6 7 8 \u0026lt;?php class NewsController { public function index() { var items = Database.sql(\u0026#34;select * from news\u0026#34;); return NewsView.withItems(items); } } As you can see, pretty simple stuff: we get all the news items for the database and return some kind of view with the items.\nCan you guess what happened to that file when you take a quick look at these commit messages:\nThat’s all pretty clear right. But you might still be wondering why we created those empty tests stubs first. This is what happens when we click those ...’s\nThis is the basic idea behind atomic commits: Small commits that tell a story.\nThe best way to do this by making the commits along the coding of the feature. Look at a piece of code you have to write or refactor. You will start to see the things you need to do: first I have to create a file. Ok create the file, commit the file and explain why you need that file. Next I need to create a method, create empty method, commit. etc\u0026hellip;\nDamn this is a lot of work Yes it is. I’m not going to lie to you, this is something you will have to actively do. But I assure you it will improve your workflow.\nAtomic commits will drive the quality of your code reviews on pull requests way up. they will also understand your thought process, helping them to review the changes you made and keeping them motivated along the way.\nI bet you’re not very stoked to start a review on this one:\nThis is not a very fun thing to do, you will also not get a lot of great insights on this. People doze off or lose track half way through the review.\nLowering the barrier Not only will you get better code reviews, you will increase knowledge sharing inside the company along the way. If there are junior developers in the team, this can be a great tool to passively teach them some tips and tricks and even change their mindset on code.\nThey can fully see the workflow and thought process the committer made. And because a single commit is now a much smaller block of code everyone in the team can chime in and discuss the code.\nThis technique also has the great benefit of making cherry picking in GIT easier. Mostly because you always have very small units to work with.\nConclusion Atomic commits are not a new thing, they are even often described as a GIT best practice. Yet I don’t actually see them that often. People often either cite that it’s too much work (an excuse that seems to pop up on every good code practice thing), or that it will make their main branch too verbose (you can always GIT squash your commits before merging).\nThat said, I really hope you give this a shot. It might make your life and that of your team a little bit better. If not, you just have a feature that is a bit more verbose in your GIT history.\nAtomic commits: Telling stories with GIT from programming "},{"section":"Blog","slug":"/blog/2017-07-24-connecting-microservices/","title":"Connect microservices with the help of GRPC","description":"Microservices can solve a lot of architectural problems, and sometimes create a few fun new ones. A big problem however is connecting these services to each other. Can GRPC lend a hand here?","date":"July 24, 2017","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2017-07-24-grpc/header_hu8590b9fc2549546071fa46fb29151515_93261_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"115\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2017-07-24-grpc\\/header_hu8590b9fc2549546071fa46fb29151515_93261_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2017-07-24-grpc/header_hu8590b9fc2549546071fa46fb29151515_93261_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2017-07-24-grpc\\/header_hu8590b9fc2549546071fa46fb29151515_93261_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Software, Managing technology, Infrastructure","tags":"Clean code, API","content":"Microservices are all the rage these days. Luckily underneath the hype there are some great use cases for them. If you’re splitting up a monolith codebase into smaller specialised chunks, extracting a long running queue to its own system, or even using particular pieces of code in a different programming language. You always have to solve one architectural problem. How do I make these things talk to each other.\nYour first reflex might be a collection of REST api’s. Put them in a network with filtered ip’s, or any other way to secure it, and call it a day. But if we take a step back and look at this setup, is REST really the best way to go about it?\nDon’t get me wrong, I love REST. But in this case should we be thinking in terms of resources? If we take a system that crops avatars for example. You would get something like this\nPATCH images/4 { \u0026#34;width\u0026#34;: 400, \u0026#34;height\u0026#34;: 200 } This doesn\u0026rsquo;t really feel right. We aren\u0026rsquo;t dealing with resources here but more with actions on data.\nFortunately we aren’t the first ones to ponder on this.\nEnter RPC Some of you might have had a shiver run down your back when reading that title. RPC is commonly linked to older systems and even worst: linked to SOAP (shiver nr.2).\nThe reason you might not have great experiences with these setups is, ironically, for the same reason we described above. They have been misused to fit architecture they aren’t designed for. RPC is actually perfect for the use case above.\nFor the people not familiar with RPC, let me give a quick overview: It stands for Remote procedure call. And is, as the name suggests, a way to call procedures on a remote system. The REST call we made earlier would look like this:\nPOST images.crop-image { \u0026#34;id\u0026#34;: 4, \u0026#34;width\u0026#34;: 400, \u0026#34;height\u0026#34;: 200 } Or\nPOST cropImage { \u0026#34;id\u0026#34;: 4, \u0026#34;width\u0026#34;: 400, \u0026#34;height\u0026#34;: 200 } You treat your external API as an internal API. Parameters for the endpoint are attached in the body of the call. And that gives some weird results sometimes. In the case of RPC, Verbs don\u0026rsquo;t really matter. If you want to fetch a user for example, it could look like this:\nPOST displayUser { “Id”: 4 } Or\nGET displayUser?id=4 If you’re an avid REST supporter and never worked with RPC before, this all looks very strange. Maybe even dirty. I personally don’t like public RPC API’s, but in very specific cases they might be useful. If your API is more like an application that does actions on data, instead of managing data, it can make sense. (Just remember that this is not an excuse for letting your internal architecture bleed into your API).\nKnowing this, we can look at our microservices in the same light. Here we have small applications that might benefit more from the RPC style of calling methods than the REST style of altering resources.\nA nice end goal for our microservices might be to use them in our code, without knowing that they are remote. Let me better explain this with an example.\n1 2 3 4 5 6 7 \u0026lt;?php public function mailUsers(Message $message) { $users = $this-\u0026gt;userRespository-\u0026gt;getUsers(); MailService::SendToUsers($users, $message); } It would be great if we could use code like this to communicate to a remote service. The Mailservice would be an abstraction that takes the method SendToUsers dynamically from the microservice.\nIn that way, when you update the API of the microservice, you would not need to update the Mailservice code. The client would automaticlly have access to the new methods.\nOf course that would take a lot of work to create. You would have to write some sort of transformer, create something that can login to the service, and eventually POST the data…\nGRPC There is another company with the same issues as us. Ok maybe not exactly the same issues as us, cause they are maybe a bit bigger. Google created a system called Stubby that connects most of their services together. When Stubby got a rewrite, Google decided to create a new system. Not closely matching their infrastructure and even made it open-source. This new system is called GRPC .\nGRPC is a RPC framework that does a lot of heavy lifting for you. First of all, it handles all the load balancing, tracing, health checking and authentication functions you would otherwise have to write yourself. It can even go full async. But that is not even the coolest part. It also writes all the code for the connection.\nLet’s take a look at how it works If you want to execute methods on a remote system as if they were present in your current system, you will have to transform the data. You have no idea what the server is expecting. The server on the other side would want to have that data serialized as well. This is also a great place to add some validation on that data.\nTo tackle serialization and validation Google created something called protocol buffers. These protocol buffers rely on proto files that tell them what data is coming in and out. This system is somewhat comparable to systems like Swagger and Blueprint . Unlike these, proto files are less human readable and look at bit more like code. And pack a lot more functionallity than just documentation.\nHere is an example of one of those proto files:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 syntax = \u0026#34;proto3\u0026#34;; package tutorial; message Person { required string name = 1; required int32 id = 2; optional string email = 3; enum PhoneType { MOBILE = 0; HOME = 1; WORK = 2; } } As you can see they have a C/Java style and more importantly, are strictly typed. The numbers that are assigned to these variables are id’s for the system itself. Please note that these files are allowed to have a bit of logic in them making them very flexible. You can look at them as value objects.\nOnce you have created the Proto file, the real magic happens. Now you are able to generate the connection between the systems. I say generate, because it is exactly like that. GRPC can now automatically generate an SDK that you can import in your client and server. This SDK uses the mapping to act as regular methods calls in your current code base.\nYou can find some examples of generated code on the GRPC github Why would I want protobuffers over something like JSON? We now know on a high level how GRPC works, but we still haven’t talked about how the data is actually transmitted. The downside here is that unless you dive really deep, this will all be a bit blackbox-ish.\nProtobuffers aren’t really designed to be human readable, they are compressed binaries. I know this might be a huge turn off, but it does has its advantages. These come mainly in the form of its small footprint and speed.\nYogesh Shinde posted an article on Dzone on the comparison between JSON and protobuffers that suggested that the later are almost double as fast.\nBruno Krebs ’s article Beating JSON performance with Protobuf even sported cases that were up to 6 times the speed.\nAnd what are the big downsides? Everything comes at a price, and GRPC is no exception. The biggest downside is obviously the black box connections. They are hard to debug and you’re not ever really sure about what’s transmitted.\nThe generated code is also a bit of a double edged sword. Lots of people have had some bad experiences with generated code (for good reasons). But to be honest, I feel that in this case it’s not that bad. The generated code are mostly value like objects that sometimes are little more than getters and setters and it does allow you to generate SDK’s in loads of different languages with a single click, so that is a decision you have to make for yourself.\nI also found the set up a bit hard. In the case of PHP they suggest you install using PECL what is not really ideal (There is a composer option as wel). You also need to run a Node server so that might not jive all that well with your current setup.\nConclusion This might all seem a bit daunting to set up if you only have 1 or 2 microservices in your domain. But if your product is a collection of different microservices, you might save some time and performance with this technology. Especially if there are a few different programming languages mixed in.\nBut be sure to create a pilot project before you take the plunge.\n"},{"section":"Blog","slug":"/blog/2017-07-02-yk38-bug/","title":"The Y2k38 Bug: The biggest news craze of the year 2038","description":"In 2038 a bug that will apear that might trigger a strong feeling of déjà vu to the Y2k craze. The Y2k38 bug seems to come at a very random moment, but it all makes sense if we apply a bit of computer science to it.","date":"July 2, 2017","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2017-07-02-yk38-bug/header_hu6be22b1c96822edc8ae2169e0459c4a9_420121_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"115\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2017-07-02-yk38-bug\\/header_hu6be22b1c96822edc8ae2169e0459c4a9_420121_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/2017-07-02-yk38-bug/header_hu6be22b1c96822edc8ae2169e0459c4a9_420121_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/2017-07-02-yk38-bug\\/header_hu6be22b1c96822edc8ae2169e0459c4a9_420121_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Software, Managing technology","tags":"legacy","content":"As you might know, I co-organise a PHP meetup called: PHP Antwerp . Some time ago we had one of our talented speakers: Joeri Sebrechts talk about “What every developer should know about time, no excuses“ (If you ever have the chance to see it, I wholly recommend it). In this talk, he mentions briefly the Y2k38 problem. A bug that will wreck havoc on systems that store time in Unix epoch timestamps.\nWait, this sounds familiar. That’s because it is …\nFor those of you who weren\u0026rsquo;t fully sentient around the time everyone partied like it was 1999 (for the second time). The big problem around that period was the Y2K bug. Quickly summed up, the Y2K bug was due to people storing years in a 2 digit form like 88 or 67. Now when the year ticks over to 2000 (or every 100 years) they would reset to 00 or 01.\nAt the time there was a lot of media buzz around the topic. Planes would fall out of the sky, hospitals would shut down, society would collapse. When the clock eventually ticked over to the new millennium, everything seemed to be still fully functional (including the bleached spiked hair styles). The media quickly resumed to the new hot topic and it all quickly died down. The entire event would be remembered as a hoax.\nBut it absolutely wasn’t. In Gary Hockin’s talk “Using Open Source for Fun and Profit” (One of the best talks I’ve ever seen) he briefly talks about working together with other engineers to check applications for the bug and mitigating the issue (yes he is that old). The truth is that it costed a lot of hands and a lot of capital to sort out.\nAnd even then we didn’t made it out without a scrap. Credit card machines stoped working , 2 unplanned abortions ensued , An alarm sounded in a nuclear powerplant in Japan and even the US Naval Observatory was touched.\nWhat makes 2038 so special? So yeah, Y2K happened because of a logical problem, but 2038 sounds a bit random… That’s because we are looking at the date in a “human readable” form. If we store the date as a Unix epoch timestamp, a form of timekeeping that counts seconds forth from 00:00:00 1 January 1970, we would get 2147483648.\nAgain, for some people this might still look like a very random number, but that is more than half of the maximum range an integer can take on a 32-bit system. An integer has a positive range and a negative range. This allowed us to go to dates before the year 1970. Half of its range is negative and half of its range is positive. If you count these two halves up, you might see that we are dealing here with an integer overflow. More precisely after 03:14:07 UTC on 19 January 2038.\nIt is possible to change the positive and negative range of the data. However you can not extend it, but you can shift it forward or backward. For example, a company that deals a lot in old data might have shifted the timestamp further back. Giving it less reach in times after 1970.\nThis means that the Y2k38 might not appear for everyone at the same time. Or even in the year 2038.\nWhat happens then? Mostly the same situation as Y2K, but in this case we don’t go back to 1900 but we go back to 13 December 1901. The good news here is that we jump from a Tuesday to a Friday. The bad news is that banks might calculate negative interests, airports might send wrong routes to planes, basically everything that has a critical function related to timekeeping might be in trouble.\nWhy do these things happen? When we look back at the Y2K bug, it all seems kinda silly. Why would you store a year in a 2 digit form … why couldn’t you anticipate this issue … The same question arises for Y2k38, you know the integer will someday run out in you 32 bit system. So why use it?\nThere is a bit of survivorship bias going on here. Take for example the project you are currently working on. It can be a long term legacy project, a cool new startup idea or a small advertising project. Will that be around for 5 years? 10 years? 30 years? It’s very hard to tell right now, technologies change, the product changes. Preparing your code for an issue that might show up in 30 years sounds irrational. Yet somehow some systems keep running without that refactor for years.\npremature optimization is the root of all evil (or at least most of it) in programming. - Donald Knuth\nWhat software is at risk at the moment? It is very fussy to give a full list of all systems at risk. But it is safe to assume that almost all systems that count on Unix timestamps in a 32-bit environment will be at risk.\nThis includes operating systems, databases, embedded systems …\nShould I start digging a fallout shelter? Yes, yes you should. Would be a kickass ice breaker. “Did you know I have a fallout shelter” ? Actually scrap that, sounds kinda creepy. You would a least not need one for this bug. Just as with the Y2K bug, this one will pass. There will be a lot of money spend. A lot of people will earn a lot of money. But in the end, it will mostly be resolved.\nIn the meantime, it seems best to not store your dates in Unix timestamps if you\u0026rsquo;re on a 32-bit system. For all you know your software might still run on some old machine in 20 years.\n"}]