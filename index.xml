<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frederick Vanbrabant delirious rantings</title>
    <link>https://frederickvanbrabant.com/</link>
    <description>Recent content on Frederick Vanbrabant delirious rantings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 03 Apr 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://frederickvanbrabant.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The simple class</title>
      <link>https://frederickvanbrabant.com/post/2019-04-03-the-simple-class/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2019-04-03-the-simple-class/</guid>
      <description>I work in many legacy code bases, and in fact, I&amp;rsquo;ve made it a big part of my career. I love diving into big monoliths that have grown out of proportion and tidying them up. One of the best parts of that work is rewriting a God class into a connection of small reusable classes. Let&amp;rsquo;s take a look at what makes a simple class great.
One of my favourite types of classes is a value object.</description>
    </item>
    
    <item>
      <title>A love letter to legacy projects</title>
      <link>https://frederickvanbrabant.com/post/2018-10-08-a-love-letter-to-legacy-projects/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2018-10-08-a-love-letter-to-legacy-projects/</guid>
      <description>This post wast orignially posted on the 24daysindecember site
Monday morning. Your previous project just wrapped up, and they are going to assign you a brand new one. They even promised you the lead on this project. Who said Mondays couldn’t be great?
A few hours later and you are staring at the most dreadful code you have ever seen — controllers of more than a thousand lines, PHP that injects jQuery in the views, raw SQL statements that could challenge a Dostoyevsky novel in size.</description>
    </item>
    
    <item>
      <title>The Integration Operation Segregation Principle</title>
      <link>https://frederickvanbrabant.com/post/2018-10-08-integration-operation-segregation-principle/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2018-10-08-integration-operation-segregation-principle/</guid>
      <description>A few weeks ago I attended a DDDBelgium meetup where I was lucky to participate in a refactor workshop lead by Pim and Joop. After the incredible workshop Pim, Dries and me were discussing some code that we refactored earlier . Not so long in the conversation the words &amp;ldquo;Integration Operation Segregation Principle&amp;rdquo; casually got dropped by Pim.
Now I&amp;rsquo;m going, to be honest with you (as I was with them), I had no idea what the hell he was talking about.</description>
    </item>
    
    <item>
      <title>What performance tricks actually work</title>
      <link>https://frederickvanbrabant.com/post/2018-07-24-php-performance/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2018-07-24-php-performance/</guid>
      <description>We&amp;rsquo;ve all been there before, you submit a pull request and moments later you get a comment like: &amp;ldquo;Hey you should use a native function here, they are so much faster&amp;rdquo; or &amp;ldquo;You can declare this final, that way we save some processing power&amp;rdquo;.
It&amp;rsquo;s great that we as developers keep an eye on this, but how true are these thing. And are they still a thing in newer PHP versions?</description>
    </item>
    
    <item>
      <title>Atomic commits: Telling stories with Git</title>
      <link>https://frederickvanbrabant.com/post/2017-12-7-atomic-commits/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2017-12-7-atomic-commits/</guid>
      <description>I always find it amazing to see how different people create pull requests. Some people like to put every file they’ve touched into one big commit. Other people split their commits up per file. There are even people that split it up according to domains.
I’ve been all these people at one point in my career, but these days I’m all into atomic commits. Never heard of that concept? No worries, let me introduce you to:</description>
    </item>
    
    <item>
      <title>Connect microservices with the help of GRPC</title>
      <link>https://frederickvanbrabant.com/post/2017-07-24-connecting-microservices/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2017-07-24-connecting-microservices/</guid>
      <description>Microservices are all the rage these days. Luckily underneath the hype there are some great use cases for them. If you’re splitting up a monolith codebase into smaller specialised chunks, extracting a long running queue to its own system, or even using particular pieces of code in a different programming language. You always have to solve one architectural problem. How do I make these things talk to each other.</description>
    </item>
    
    <item>
      <title>The Y2k38 Bug: The biggest news craze of the year 2038</title>
      <link>https://frederickvanbrabant.com/post/2017-07-02-yk38-bug/</link>
      <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2017-07-02-yk38-bug/</guid>
      <description>As you might know, I co-organise a PHP meetup called: PHP Antwerp. Some time ago we had one of our talented speakers: Joeri Sebrechts talk about “What every developer should know about time, no excuses“ (If you ever have the chance to see it, I wholly recommend it). In this talk, he mentions briefly the Y2k38 problem. A bug that will wreck havoc on systems that store time in Unix epoch timestamps.</description>
    </item>
    
    <item>
      <title>The broken windows theory or “Why some projects are just destined to suck”</title>
      <link>https://frederickvanbrabant.com/post/2017-06-18-broken-windows-theory/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2017-06-18-broken-windows-theory/</guid>
      <description>Why is it that most legacy software projects are not really fun to work on? How can we stop that greenfield project to turn into one of those dull big projects? I would argue that it’s all in the foundation.
The broken windows theory In 1982 James Q. Wilson and George L. Kelling wrote an article on a theory they had. It stated that once there is a building in a neighborhood that shows small signs of neglect (a mailbox that’s overflowing with a few days worth of mail, trash on the street, a broken window that stays broken, &amp;hellip;) the entire neighborhood devalues and opens itself up for more neglect.</description>
    </item>
    
    <item>
      <title>What the hell are Generics and would I want them in PHP?</title>
      <link>https://frederickvanbrabant.com/post/2017-05-31-generics-in-php/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2017-05-31-generics-in-php/</guid>
      <description>So everyone is talking about this hip “new” kid on the block for PHP: Generics. The RFC is on the table and a lot of people are getting all excited about it, but you don’t fully see the excitement? Let’s explore what it’s all about!
What is the use case of a Generic? Generics is not something new. Statically typed languages like Java and C# have had them for ages.</description>
    </item>
    
    <item>
      <title>How we improved our PWA score by 53 points in 4 hours</title>
      <link>https://frederickvanbrabant.com/post/2017-03-13-improved_pwa_score/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2017-03-13-improved_pwa_score/</guid>
      <description>This post wast orignially posted on the madewithlove site
A week ago Hannes and I attended PHPUK in London (You can read all about it here). We saw a lot of great talks and met numerous very smart people. Among these was Rowan Merewood, who gave a talk called &amp;ldquo;Progressive Web Apps in the wild&amp;rdquo;. He convinced me to try and add some PWA&amp;rsquo;ness to one of our applications, just to try it out.</description>
    </item>
    
    <item>
      <title>On how to implement a code of conduct</title>
      <link>https://frederickvanbrabant.com/post/2016-01-29-on-how-to-implement-a-code-of-conduct/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2016-01-29-on-how-to-implement-a-code-of-conduct/</guid>
      <description>This post wast orignially posted on the madewithlove site
Preface Recently there has been a lot of commotion around code of conducts and if a user group/open-source project should implement them or not. This is not a post about that, we shall not be discussing the ethics or possible political impact this brings with it. We will however propose a starting point on how to implement them.
Please note that I am in no way an expert in this field, this blogpost is the result of endless talks with colleagues / friends and people I bugged on Slack (extra thanks to Paul Hallett and Jack Skinner).</description>
    </item>
    
    <item>
      <title>A bird&#39;s eye view on API development</title>
      <link>https://frederickvanbrabant.com/post/2015-11-16-birdseye-view-on-api/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://frederickvanbrabant.com/post/2015-11-16-birdseye-view-on-api/</guid>
      <description>This post wast orignially posted on the madewithlove site
 So an API, that&amp;rsquo;s just output of some JSON code right? No problem, my framework does that automatically.
 Or if you just want an overview on some best practices, conventions and nifty ways people have done stuff before, this post has you covered.
We won&amp;rsquo;t go in much detail about source code here. This article is language agnostic, whether you use PHP, Ruby, Velato or some obscure Javascript framework you can happily follow along.</description>
    </item>
    
  </channel>
</rss>